name: "DMM CI"

on: [workflow_dispatch]

jobs:
  docker:
    runs-on: ubuntu-18.04
    env:
      SERVICE: dmm-interface
      CI: false 
      DISABLE_ESLINT_PLUGIN: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.SERVICE }}-buildx
      
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        id: yarn-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true' 
        run: yarn install

      - name: Build
        run: yarn build
      
      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          labels: |
            commit=${{ github.sha }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE }}:develop
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
