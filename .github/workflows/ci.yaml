name: "DMM CI"

concurrency: open-pr-${{ github.ref }}
on: 
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - closed
      - synchronize

env:
  SERVICE: dmm-interface

jobs:
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      repo_name: ${{ github.event.repository.name }}
      pr_number: ${{ steps.pr_number.outputs.value }}
      image_name: "vietanhs0817/${{ env.SERVICE }}"
      image_tag: ${{ steps.get_tag.outputs.value }} 
      repo_owner: ${{ github.repository_owner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get PR Number
        id: pr_number
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          echo "PR: $PR_NUMBER"     
          echo "::set-output name=value::$PR_NUMBER"

      - name: Get tag
        id: get_tag
        run: |
          short_sha="$(git rev-parse --short HEAD)"
          echo "::set-output name=value::develop-$short_sha"  


  docker:
    if: github.event.action != 'closed'
    needs:
      - prepare
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: vietanhs0817
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.SERVICE }}-buildx

      - name: Restore node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependences
        uses: bahmutov/npm-install@HEAD

      - name: Build
        env:
          CI: false 
        run: yarn build
        
      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          labels: |
            commit=${{ github.sha }}
          tags: |
            ${{ needs.prepare.outputs.image_name }}:${{ needs.prepare.outputs.image_tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  opened:
    needs:
      - prepare
      - docker
    if: github.event.action == 'opened' || github.event.action == 'reopened' 
    runs-on: ubuntu-18.04
    steps:
    - name: Map event
      id: map_event
      run: |
        EVENT="${{ github.event.action }}"
        if [[ "$EVENT" = "reopened" ]]; then
          EVENT=opened 
        fi
        
        echo "::set-output name=value::$EVENT"

    - name: Trigger to Auto deploy PR
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.GH_PAT }}
        repository: kybernetwork/infra-config
        event-type: ${{ steps.map_event.outputs.value }}
        client-payload: ${{ toJson(needs.prepare.outputs) }}

  closed:
    needs:
      - prepare 
    if: github.event.action == 'closed'
    runs-on: ubuntu-18.04
    steps:
    - name: Trigger to Auto deploy PR
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.GH_PAT }}
        repository: kybernetwork/infra-config
        event-type: ${{ github.event.action }}
        client-payload: ${{ toJson(needs.prepare.outputs) }}
